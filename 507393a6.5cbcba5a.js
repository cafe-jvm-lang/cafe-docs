(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{108:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return u}));var a=n(0),r=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function b(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?b(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):b(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=r.a.createContext({}),p=function(e){var t=r.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=p(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},s=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,b=e.parentName,o=i(e,["components","mdxType","originalType","parentName"]),d=p(n),s=a,u=d["".concat(b,".").concat(s)]||d[s]||m[s]||l;return n?r.a.createElement(u,c(c({ref:t},o),{},{components:n})):r.a.createElement(u,c({ref:t},o))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,b=new Array(l);b[0]=s;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:a,b[1]=c;for(var o=2;o<l;o++)b[o]=n[o];return r.a.createElement.apply(null,b)}return r.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},82:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return b})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),l=(n(0),n(108)),b={id:"cafe-fundamentals",title:"Cafe Fundamentals",sidebar_label:"Cafe Fundamentals"},c={unversionedId:"cafe-fundamentals",id:"cafe-fundamentals",isDocsHomePage:!1,title:"Cafe Fundamentals",description:"Comments",source:"@site/docs/cafe-fundamentals.md",slug:"/cafe-fundamentals",permalink:"/docs/cafe-fundamentals",editUrl:"https://github.com/cafe-jvm-lang/cafe-docs/docs/cafe-fundamentals.md",version:"current",sidebar_label:"Cafe Fundamentals",sidebar:"someSidebar",previous:{title:"Let's Start",permalink:"/docs/"},next:{title:"Data Structures",permalink:"/docs/data-structures"}},i=[{value:"Comments",id:"comments",children:[]},{value:"Variables &amp; Constants",id:"variables--constants",children:[]},{value:"Data types",id:"data-types",children:[]},{value:"Operators",id:"operators",children:[]},{value:"Control Flow",id:"control-flow",children:[{value:"<code>if..else</code>",id:"ifelse",children:[]},{value:"<code>for</code> Loop",id:"for-loop",children:[]}]},{value:"<code>{Object}</code>",id:"object",children:[]},{value:"<code>Function</code>",id:"function",children:[]}],o={toc:i};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},o,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"comments"},"Comments"),Object(l.b)("p",null,"Cafe supports single line comment using ",Object(l.b)("inlineCode",{parentName:"p"},"#")," Symbol and multi line comments using ",Object(l.b)("inlineCode",{parentName:"p"},"/*..*/")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"# this is single line comment.\n/*\n    this is Multi-line comment.\n*/\n")),Object(l.b)("h2",{id:"variables--constants"},"Variables & Constants"),Object(l.b)("p",null,"As cafe is dynamically typed, the variables can be declared using ",Object(l.b)("inlineCode",{parentName:"p"},"var")," keyword and constants can be declared using ",Object(l.b)("inlineCode",{parentName:"p"},"const")," keyword."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"var a=10, b;\nconst c = \u201cHey!\u201d;\n")),Object(l.b)("h2",{id:"data-types"},"Data types"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"String"),"\t\t: represents sequence of characters."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Number"),":   : represents numeric values."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Boolean"),"\t: represents boolean value either ",Object(l.b)("inlineCode",{parentName:"p"},"true "),"or ",Object(l.b)("inlineCode",{parentName:"p"},"false"),"."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"var a = \u201cHi\u201d;\nvar b = 100, c=10.2;\nvar d=true; \n")),Object(l.b)("h2",{id:"operators"},"Operators"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Symbol(s)"),Object(l.b)("th",{parentName:"tr",align:null},"Description"),Object(l.b)("th",{parentName:"tr",align:"left"},"Examples"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"="),Object(l.b)("td",{parentName:"tr",align:null},"Assign a value to a variable."),Object(l.b)("td",{parentName:"tr",align:"left"},"var a = 10;")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"+"),Object(l.b)("td",{parentName:"tr",align:null},"Returns the sum of numeric operands or string concatenation."),Object(l.b)("td",{parentName:"tr",align:"left"},Object(l.b)("inlineCode",{parentName:"td"},"cmd.println(2+3); # 5                                 cmd.println(\u201cHello\u201d + \u201cWorld\u201d); # HelloWorld"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"-"),Object(l.b)("td",{parentName:"tr",align:null},"Subtracts the two operands, producing their difference."),Object(l.b)("td",{parentName:"tr",align:"left"},Object(l.b)("inlineCode",{parentName:"td"},"cmd.println(4-2); # 2"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"*"),Object(l.b)("td",{parentName:"tr",align:null},"Multiplication on numbers and strings."),Object(l.b)("td",{parentName:"tr",align:"left"},Object(l.b)("inlineCode",{parentName:"td"},'cmd.println(4*2); # 8                                 cmd.println("Hello"*2) # HelloHello'))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"/"),Object(l.b)("td",{parentName:"tr",align:null},"Division on numbers."),Object(l.b)("td",{parentName:"tr",align:"left"},Object(l.b)("inlineCode",{parentName:"td"},"cmd.println(4/2); # 2"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"%"),Object(l.b)("td",{parentName:"tr",align:null},"Modulo on numbers."),Object(l.b)("td",{parentName:"tr",align:"left"},Object(l.b)("inlineCode",{parentName:"td"},"cmd.println(8/3); # 2"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"**"),Object(l.b)("td",{parentName:"tr",align:null},"Computes the power of a number."),Object(l.b)("td",{parentName:"tr",align:"left"},Object(l.b)("inlineCode",{parentName:"td"},"cmd.println(2**3); # 8"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"//"),Object(l.b)("td",{parentName:"tr",align:null},"Computes the floor of a number."),Object(l.b)("td",{parentName:"tr",align:"left"},Object(l.b)("inlineCode",{parentName:"td"},"cmd.println(9//2); # 4"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"|","|"," , && , !or , and, not"),Object(l.b)("td",{parentName:"tr",align:null},"Logical operators."),Object(l.b)("td",{parentName:"tr",align:"left"},Object(l.b)("inlineCode",{parentName:"td"},"cmd.println((true and true)); # true  cmd.println(not true); # false"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"== , != , > , >= , <, <="),Object(l.b)("td",{parentName:"tr",align:null},"Relational operators."),Object(l.b)("td",{parentName:"tr",align:"left"},Object(l.b)("inlineCode",{parentName:"td"},"cmd.println((2 >= 3)); # false"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},">> , >>> , ~ , <<"),Object(l.b)("td",{parentName:"tr",align:null},"Bitshift operators."),Object(l.b)("td",{parentName:"tr",align:"left"},Object(l.b)("inlineCode",{parentName:"td"},"cmd.println((2 >> 1)); # 1"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"& , ","|"," , ^ , ~"),Object(l.b)("td",{parentName:"tr",align:null},"Bitwise operators."),Object(l.b)("td",{parentName:"tr",align:"left"},Object(l.b)("inlineCode",{parentName:"td"},"cmd.println((2 & 2)); # 2"))))),Object(l.b)("h2",{id:"control-flow"},"Control Flow"),Object(l.b)("h3",{id:"ifelse"},Object(l.b)("inlineCode",{parentName:"h3"},"if..else")),Object(l.b)("p",null,"The if statement executes a statement if a specified condition is evaluated true. "),Object(l.b)("p",null,"If the condition is false, another statement can be executed. "),Object(l.b)("p",null,"Multiple ",Object(l.b)("inlineCode",{parentName:"p"},"if...else")," statements can be nested to create an ",Object(l.b)("inlineCode",{parentName:"p"},"else if")," clause."),Object(l.b)("p",null,"Syntax"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"if(condition1)\n    Statement1\nelse if(condition2)\n    Statement2\n...\n...\nelse\n    StatementN\n")),Object(l.b)("p",null,"Example"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"var i=10;\nif(i<10){\n    cmd.println(\u201cLess Than 10\u201d);\n} else if(i==10){\n    cmd.println(\u201cEquals\u201d);\n} else {\n    cmd.println(\u201cGreater Than 10\u201d);\n}\n                                            \n")),Object(l.b)("h3",{id:"for-loop"},Object(l.b)("inlineCode",{parentName:"h3"},"for")," Loop"),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"for")," statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by ",Object(l.b)("inlineCode",{parentName:"p"},";"),", followed by a statement (usually a block statement) to be executed in the loop."),Object(l.b)("p",null,"Syntax"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"for ([initialization]; [condition]; [final-expression])\n    statements\n")),Object(l.b)("p",null,"Example"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"# prints 0 to 4.\nfor(var i=0;i<5;i=i+1){\n    cmd.println(i);\n}\nvar i=0;\nfor(;i<5;i=i+1){\n    cmd.println(i);\n}\n                                            \n")),Object(l.b)("h2",{id:"object"},Object(l.b)("inlineCode",{parentName:"h2"},"{Object}")),Object(l.b)("p",null,"Cafe Objects are a collection of properties made up of key-value pairs. Keys are unique & valid identifiers. Values can be any valid type (primitives, Functions or Objects). Objects can be declared using {} notation."),Object(l.b)("p",null,"Syntax"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-javascript"},"{[[key: value],([key: value],)*]}\n")),Object(l.b)("p",null,"Example"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"var a = {};\nfunc Hi(){ return \u201chi\u201d; }\nvar a = { \n    hello: \u201cworld!\u201d, \n    a: 1, \n    b: Hi  # references a function object Hi. \n};\n")),Object(l.b)("p",null,"Object properties can be accessed using the ",Object(l.b)("inlineCode",{parentName:"p"},"."),"  or ",Object(l.b)("inlineCode",{parentName:"p"},"[]")," operator."),Object(l.b)("p",null,"Syntax"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"object.property\nobject[property]\n")),Object(l.b)("p",null,"Example"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"var z = \u201ca\u201d;\ncmd.println(a.hello); # world!\ncmd.println(a.b());   # hi\ncmd.println(a[\u201chello\u201d]);# world!\ncmd.println(a[z]);     # 1\n")),Object(l.b)("h2",{id:"function"},Object(l.b)("inlineCode",{parentName:"h2"},"Function")),Object(l.b)("p",null,"In CAFE, functions can be declared using keyword ",Object(l.b)("inlineCode",{parentName:"p"},"func"),"."),Object(l.b)("p",null,"Syntax"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"func name([param[, param,[..., param]]]) {\n    [statements]\n}\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},Object(l.b)("inlineCode",{parentName:"strong"},"name")),"\nThe function name."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},Object(l.b)("inlineCode",{parentName:"strong"},"param "),"\t(Optional)"),"\nThe argument names to be passed to the function."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},Object(l.b)("inlineCode",{parentName:"strong"},"statements")),"\nThe statements which comprise the body of the function."),Object(l.b)("p",null,"Example"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"func areaOfTriangle(base, height){\n    return 0.5 * base * height;\n}\ncmd.print(areaOfTriangle(5, 10)); # 25\n")))}p.isMDXComponent=!0}}]);